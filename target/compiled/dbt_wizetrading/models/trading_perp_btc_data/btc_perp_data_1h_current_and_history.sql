-- wizetrading.candle_1hour_current_and_history source

-- This is now a dbt model file, not a raw SQL query
with 
BTC_PERP_1h_btc_c as
(
    select * from "aoavfbel"."wizetrading"."btc_perp_data_1h"
)
,
BTC_PERP_1h_btc_h as
(
    select * from "aoavfbel"."wizetrading"."btc_perp_data_1h_history"
),
BTC_PERP_1h_btc_c_treated as (
    select to_char(to_timestamp((event_time / 1000)::double precision), 'YYYY-MM-DD HH24:MI:SS'::text) AS formatted_datetime,
    stream,
    event_type,
    event_time,
    symbole_src,
    candle_open_time,
    candle_close_time,
    symbole,
    "interval",
    first_trade_id,
    last_trade_id,
    openprice,
    close_price,
    high_price,
    low_price,
    base_asset_volume,
    nb_trades,
    candle_closed,
    quote_asset_volume,
    taker_buy_base_asset_volume,
    taker_buy_quote_asset_volume
    FROM BTC_PERP_1h_btc_c
      WHERE candle_closed = false
)
,
BTC_PERP_1h_btc_h_treated as (
         select to_char(to_timestamp((event_time / 1000)::double precision), 'YYYY-MM-DD HH24:MI:SS'::text) AS formatted_datetime,
         stream,
         event_type,
         event_time,
         symbole_src,
         candle_open_time,
         candle_close_time,
         symbole,
         "interval",
         first_trade_id,
         last_trade_id,
         openprice,
         close_price,
         high_price,
         low_price,
         base_asset_volume,
         nb_trades,
         candle_closed,
         quote_asset_volume,
         taker_buy_base_asset_volume,
         taker_buy_quote_asset_volume
        FROM BTC_PERP_1h_btc_h
)
,
pivot_curent AS (
         select curr.formatted_datetime,
         curr.stream,
         curr.event_type,
         curr.event_time,
         curr.symbole_src,
         curr.candle_open_time,
         curr.candle_close_time,
         curr.symbole,
         curr."interval",
         curr.first_trade_id,
         curr.last_trade_id,
         curr.openprice,
         curr.close_price,
         curr.high_price,
         curr.low_price,
         curr.base_asset_volume,
         curr.nb_trades,
         curr.candle_closed,
         curr.quote_asset_volume,
         curr.taker_buy_base_asset_volume,
         curr.taker_buy_quote_asset_volume,
         lag(hist.openprice, 1) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS openprice_lag_1,
         lag(hist.openprice, 2) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS openprice_lag_2,
         lag(hist.openprice, 3) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS openprice_lag_3,
         lag(hist.openprice, 4) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS openprice_lag_4,
         lag(hist.openprice, 5) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS openprice_lag_5,
         lag(hist.openprice, 6) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS openprice_lag_6,
         lag(hist.openprice, 7) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS openprice_lag_7,
         lag(hist.openprice, 8) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS openprice_lag_8,
         lag(hist.openprice, 9) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS openprice_lag_9,
         lag(hist.openprice, 10) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS openprice_lag_10,
         lag(hist.close_price, 1) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS close_price_lag_1,
         lag(hist.close_price, 2) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS close_price_lag_2,
         lag(hist.close_price, 3) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS close_price_lag_3,
         lag(hist.close_price, 4) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS close_price_lag_4,
         lag(hist.close_price, 5) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS close_price_lag_5,
         lag(hist.close_price, 6) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS close_price_lag_6,
         lag(hist.close_price, 7) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS close_price_lag_7,
         lag(hist.close_price, 8) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS close_price_lag_8,
         lag(hist.close_price, 9) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS close_price_lag_9,
         lag(hist.close_price, 10) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS close_price_lag_10,
         lag(hist.high_price, 1) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS high_price_lag_1,
         lag(hist.high_price, 2) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS high_price_lag_2,
         lag(hist.high_price, 3) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS high_price_lag_3,
         lag(hist.high_price, 4) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS high_price_lag_4,
         lag(hist.high_price, 5) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS high_price_lag_5,
         lag(hist.high_price, 6) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS high_price_lag_6,
         lag(hist.high_price, 7) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS high_price_lag_7,
         lag(hist.high_price, 8) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS high_price_lag_8,
         lag(hist.high_price, 9) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS high_price_lag_9,
         lag(hist.high_price, 10) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS high_price_lag_10,
         lag(hist.low_price, 1) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS low_price_lag_1,
         lag(hist.low_price, 2) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS low_price_lag_2,
         lag(hist.low_price, 3) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS low_price_lag_3,
         lag(hist.low_price, 4) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS low_price_lag_4,
         lag(hist.low_price, 5) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS low_price_lag_5,
         lag(hist.low_price, 6) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS low_price_lag_6,
         lag(hist.low_price, 7) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS low_price_lag_7,
         lag(hist.low_price, 8) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS low_price_lag_8,
         lag(hist.low_price, 9) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS low_price_lag_9,
         lag(hist.low_price, 10) OVER (PARTITION BY curr.event_time ORDER BY hist.event_time) AS low_price_lag_10,
         row_number() OVER (PARTITION BY curr.event_time ORDER BY hist.event_time DESC) AS rank
           FROM BTC_PERP_1h_btc_c_treated curr
             LEFT JOIN BTC_PERP_1h_btc_h_treated hist ON curr.event_time >= hist.event_time
          ORDER BY curr.event_time
)
,
final as 
(
    SELECT pivot_curent.formatted_datetime,
    pivot_curent.stream,
    pivot_curent.event_type,
    pivot_curent.event_time,
    pivot_curent.symbole_src,
    pivot_curent.candle_open_time,
    pivot_curent.candle_close_time,
    pivot_curent.symbole,
    pivot_curent."interval",
    pivot_curent.first_trade_id,
    pivot_curent.last_trade_id,
    pivot_curent.openprice,
    pivot_curent.close_price,
    pivot_curent.high_price,
    pivot_curent.low_price,
    pivot_curent.base_asset_volume,
    pivot_curent.nb_trades,
    pivot_curent.candle_closed,
    pivot_curent.quote_asset_volume,
    pivot_curent.taker_buy_base_asset_volume,
    pivot_curent.taker_buy_quote_asset_volume,
    pivot_curent.openprice_lag_1,
    pivot_curent.openprice_lag_2,
    pivot_curent.openprice_lag_3,
    pivot_curent.openprice_lag_4,
    pivot_curent.openprice_lag_5,
    pivot_curent.openprice_lag_6,
    pivot_curent.openprice_lag_7,
    pivot_curent.openprice_lag_8,
    pivot_curent.openprice_lag_9,
    pivot_curent.openprice_lag_10,
    pivot_curent.close_price_lag_1,
    pivot_curent.close_price_lag_2,
    pivot_curent.close_price_lag_3,
    pivot_curent.close_price_lag_4,
    pivot_curent.close_price_lag_5,
    pivot_curent.close_price_lag_6,
    pivot_curent.close_price_lag_7,
    pivot_curent.close_price_lag_8,
    pivot_curent.close_price_lag_9,
    pivot_curent.close_price_lag_10,
    pivot_curent.high_price_lag_1,
    pivot_curent.high_price_lag_2,
    pivot_curent.high_price_lag_3,
    pivot_curent.high_price_lag_4,
    pivot_curent.high_price_lag_5,
    pivot_curent.high_price_lag_6,
    pivot_curent.high_price_lag_7,
    pivot_curent.high_price_lag_8,
    pivot_curent.high_price_lag_9,
    pivot_curent.high_price_lag_10,
    pivot_curent.low_price_lag_1,
    pivot_curent.low_price_lag_2,
    pivot_curent.low_price_lag_3,
    pivot_curent.low_price_lag_4,
    pivot_curent.low_price_lag_5,
    pivot_curent.low_price_lag_6,
    pivot_curent.low_price_lag_7,
    pivot_curent.low_price_lag_8,
    pivot_curent.low_price_lag_9,
    pivot_curent.low_price_lag_10,
    pivot_curent.rank
   FROM pivot_curent
  WHERE pivot_curent.rank = 1
)
select * from final